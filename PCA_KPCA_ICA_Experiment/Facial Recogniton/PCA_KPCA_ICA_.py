# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k7ED1Ff-vK9tQK_ktDq8W0Txhkv_jP3n
"""

from time import time
import logging
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import KernelPCA
from sklearn.svm import SVC
from sklearn import manifold
from sklearn.decomposition import FastICA
from sklearn.decomposition import PCA


print(__doc__)

# Display progress logs on stdout
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')

lfw_people = fetch_lfw_people(min_faces_per_person=70, resize=0.4)

# introspect the images arrays to find the shapes (for plotting)
n_samples, h, w = lfw_people.images.shape

# for machine learning we use the 2 data directly (as relative pixel
# positions info is ignored by this model)
X = lfw_people.data
n_features = X.shape[1]

# the label to predict is the id of the person
y = lfw_people.target
target_names = lfw_people.target_names
n_classes = target_names.shape[0]

print("Total dataset size:")
print("n_samples: %d" % n_samples)
print("n_features: %d" % n_features)
print("n_classes: %d" % n_classes)

# split into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

n_comp_1 = np.arange(150,250,5)
accuracies = []
components = []
accuracies_ica = []
components_ica = []
for i in range(len(n_comp_1)):
  ###kpca
    n_components = n_comp_1[i]
    
    pca = KernelPCA(kernel='rbf',n_components=n_components,gamma = 0.00001).fit(X_train)
    
    X_train_pca = pca.transform(X_train)
    X_test_pca = pca.transform(X_test)

    param_grid = {'C': [1e3, 5e3, 1e4, 5e4, 1e5],
                  'gamma': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }
    clf = GridSearchCV(SVC(kernel='rbf', class_weight='balanced'), param_grid)
    clf = clf.fit(X_train_pca, y_train)
    y_pred = clf.predict(X_test_pca)

    accuracies.append(float(np.sum(y_test==y_pred))/len(y_pred))
    components.append(n_components)

    print('For '+str(n_components)+' components, accuracy is '+str(float(np.sum(y_test==y_pred))/len(y_pred))+' confusion matrix is: ')
    # print(confusion_matrix(y_test, y_pred, labels=range(n_classes)))
    # print(classification_report(y_test, y_pred, target_names=target_names))
  #############  ICA
    ica = FastICA(n_components=n_components)
    S_ = ica.fit_transform(X)
    A_ = ica.mixing_

    X_train_ica = ica.transform(X_train)
    X_test_ica = ica.transform(X_test)

    param_grid = {'C': [1e3, 5e3, 1e4, 5e4, 1e5],
                  'gamma': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }
    clf = GridSearchCV(SVC(kernel='rbf', class_weight='balanced'), param_grid)
    clf = clf.fit(X_train_ica, y_train)
    y_pred = clf.predict(X_test_ica)

    accuracies_ica.append(float(np.sum(y_test==y_pred))/len(y_pred))
    components_ica.append(n_components)

    print('For '+str(n_components)+' components, accuracy is '+str(float(np.sum(y_test==y_pred))/len(y_pred))+' confusion matrix is: ')
    # print(confusion_matrix(y_test, y_pred, labels=range(n_classes)))
    # print(classification_report(y_test, y_pred, target_names=target_names))

n_comp_1 = np.arange(150,250,3)
accuracies_lpca = []
components_lpca = []
for i in range(len(n_comp_1)):
    n_components = n_comp_1[i]

    pca = PCA(n_components=n_components, svd_solver='randomized',whiten=True).fit(X_train)

    X_train_lpca = pca.transform(X_train)
    X_test_lpca = pca.transform(X_test)

    param_grid = {'C': [1e3, 5e3, 1e4, 5e4, 1e5],
                  'gamma': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }
    clf = GridSearchCV(SVC(kernel='rbf', class_weight='balanced'), param_grid)
    clf = clf.fit(X_train_lpca, y_train)
    y_pred = clf.predict(X_test_lpca)

    accuracies_lpca.append(float(np.sum(y_test==y_pred))/len(y_pred))
    components_lpca.append(n_components)

    print('For '+str(n_components)+' components, accuracy is '+str(float(np.sum(y_test==y_pred))/len(y_pred))+' confusion matrix is: ')
    print(confusion_matrix(y_test, y_pred, labels=range(n_classes)))
    print(classification_report(y_test, y_pred, target_names=target_names))

plt.plot(components,accuracies,label='Kernel PCA')
plt.plot(components_ica,accuracies_ica,label="ICA")
plt.plot(components_lpca,accuracies_lpca,label='Linear PCA')
plt.title('Number of Components vs Accuracy')
plt.xlabel('Components')
plt.ylabel('Accuracy')
plt.legend()
plt.show()